#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
#include<stdbool.h>
#include<graphics.h>
#include<easyx.h>
#include<time.h>
#include<mmsystem.h>
#pragma comment(lib,"winmm.lib")
//二维数组
// 空地 0   墙1   目的地2   箱子3   坤4  箱子+目的地5   坤+目的地6
#define SPACE	0
#define WALL	1
#define DEST	2
#define BOX		3
#define PLAYER	4
#define ROW 10
#define COL 10
int level = 0;

//输出地图
int map[3][ROW][COL] =
{
		{
		{0,0,0,0,0,0,0,0,0,0},
		{0,0,0,1,1,1,0,0,0,0},
		{0,0,0,1,2,1,0,0,0,0},
		{0,0,0,1,3,1,1,1,1,0},
		{0,1,1,1,0,3,0,2,1,0},
		{0,1,2,3,4,0,1,1,1,0},
		{0,1,1,1,1,3,1,0,0,0},
		{0,0,0,0,1,2,1,0,0,0},
		{0,0,0,0,1,1,1,0,0,0},
		{0,0,0,0,0,0,0,0,0,0},
		},
		{
		{0,0,0,0,0,0,0,0,0,0},
		{0,0,1,1,0,0,1,1,0,0},
		{0,1,2,0,1,1,2,0,1,0},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,3,0,3,0,0,0,1},
		{1,0,0,0,4,0,0,0,0,1},
		{0,1,0,3,0,3,0,0,1,0},
		{0,0,1,2,0,0,2,1,0,0},
		{0,0,0,1,0,0,1,0,0,0},
		{0,0,0,0,1,1,0,0,0,0},
		},
		{
		{0,0,0,0,0,0,0,0,0,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,1,2,0,0,0,0,2,1,0},
		{0,1,0,0,0,0,0,0,1,0},
		{0,1,0,3,0,3,0,0,1,0},
		{0,1,0,0,4,0,0,0,1,0},
		{0,1,0,3,0,3,0,0,1,0},
		{0,1,2,0,0,0,0,2,1,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,0,0,0,0,0,0,0,0,0},
		},
};	


IMAGE img[6];
void loadImg()
{
	for (int i = 0; i < 6; i++)
	{
		char tempFileName[50] = { 0 };
		sprintf_s(tempFileName,"./images/%d.bmp", i);
		loadimage(img + i, tempFileName, 63, 63);
		putimage(i * 63, 0, img+i);
	}
	
	putimage(0, 0, img);
}
void drawMap()
{
	for (int i = 0; i < 10; i++)
	{
		for (int k = 0; k < 10; k++)
		{
			switch (map[level][i][k])
			{
			case SPACE:
				putimage(k * 63, i * 63, img + 0);
				break;
			case WALL:
				putimage(k * 63, i * 63, img + 1);
				break;
			case DEST:
				putimage(k * 63, i * 63, img + 2);
				break;
			case BOX:
				putimage(k * 63, i * 63, img + 3);
				break;
			case PLAYER:
				putimage(k * 63, i * 63, img + 4);
				break;
			case BOX + DEST:
				putimage(k * 63, i * 63, img + 5);
				break;
			case PLAYER + DEST:
				putimage(k * 63, i * 63, img + 5);
				break;
			default:
				printf("%d ", map[level][i][k]);
			}
		}
		printf("\n");
	}
}

void welcome()
{
	mciSendString(_T("open./images/必杀技.mp3"), NULL, 0, NULL);
	mciSendString(_T("play./images/必杀技.mp3"), NULL, 0, NULL);
	welcome();
}

void show()
{
	for (int i = 0; i < 10; i++)
	{
		for (int k = 0; k < 10; k++)
		{
			switch (map[level][i][k])
			{
			case SPACE:
				printf("  ");
				break;
			case WALL:
				printf("█");
				break;
			case DEST:
				printf("☆");
				break;
			case BOX:
				printf("★");
				break;
			case PLAYER:
				printf("♂");
				break;
			case BOX + DEST:
				printf("◇");
				break;
			case PLAYER + DEST:
				printf("♀");
				break;
			default:
				printf("%d ", map[level][i][k]);
			}
		}
		printf("\n");
	}
}
//推箱子
void pushBox()
{
	int i = 0, k = 0;
	for (i = 0; i < 10; i++)
	{
		for (k = 0; k < 10; k++)
		{
			if (map[level][i][k] == PLAYER)
			{
				goto end;
				break;
			}
		}
	}
end:;
	//获取键盘按键  _getch();一触即发，不需要回车   getchar需要回车
	char key = _getch();
	//printf("%d_%c\n", key, key);   //可以找键盘对应数字
	switch (key)
	{
	case 'w':     //上
	case 'W':
	case '72':
		if (map[level][i - 1][k] == SPACE || map[level][i - 1][k] == DEST)
		{
			map[level][i - 1][k] += PLAYER;
			map[level][i][k] -= PLAYER;
		}
		else if (map[level][i - 1][k] == BOX)
		{
			if (map[level][i - 2][k] == SPACE || map[level][i - 2][k] == DEST)
			{
				map[level][i - 2][k] += BOX;
				map[level][i - 1][k] -= BOX;
				map[level][i - 1][k] += PLAYER;
				map[level][i][k] -= PLAYER;
			}
		}
		break;
	case 's':      //下
	case 'S':
	case '80':
		if (map[level][i + 1][k] == SPACE || map[level][i + 1][k] == DEST)
		{
			map[level][i + 1][k] += PLAYER;
			map[level][i][k] -= PLAYER;
		}
		else if (map[level][i + 1][k] == BOX)
		{
			if (map[level][i + 2][k] == SPACE || map[level][i + 2][k] == DEST)
			{
				map[level][i + 2][k] += BOX;
				map[level][i + 1][k] -= BOX;
				map[level][i + 1][k] += PLAYER;
				map[level][i][k] -= PLAYER;
			}
		}
		break;
	case 'a':
	case 'A':    //左
	case '75':
		if (map[level][i][k - 1] == SPACE || map[level][i][k - 1] == DEST)
		{
			map[level][i][k - 1] += PLAYER;
			map[level][i][k] -= PLAYER;
		}
		else if (map[level][i][k - 1] == BOX)
		{
			if (map[level][i][k - 2] == SPACE || map[level][i][k - 2] == DEST)
			{
				map[level][i][k - 2] += BOX;
				map[level][i][k - 1] -= BOX;
				map[level][i][k - 1] += PLAYER;
				map[level][i][k] -= PLAYER;
			}
		}
		break;
	case 'd':    //右
	case 'D':
	case '77':
		if (map[level][i][k + 1] == SPACE || map[level][i][k + 1] == DEST)
		{
			map[level][i][k + 1] += PLAYER;
			map[level][i][k] -= PLAYER;
		}
		else if (map[level][i][k + 1] == BOX)
		{
			if (map[level][i][k + 2] == SPACE || map[level][i][k + 2] == DEST)
			{
				map[level][i][k + 2] += BOX;
				map[level][i][k + 1] -= BOX;
				map[level][i][k + 1] += PLAYER;
				map[level][i][k] -= PLAYER;
			}
		}
		break;
	}
}

//下一关
bool judge()
{
	for (int i = 0; i < ROW; i++)
	{
		for (int k = 0; k < COL; k++)
		{
			if (map[level][i][k] == BOX)
			{
				return false;
			}
		}
	}
	return true;
}

int main()
{
	system("mode con cols=30 lines=20");
	initgraph(ROW*64, COL*64, SHOWCONSOLE);
	loadImg();
	while (1)
	{
		
		system("cls");
		show();
		drawMap();
		if (judge())
		{
			level++;
			if (level > 2)
				exit(0);
			printf("按任意键进入下一关卡\n");
		}
		pushBox();
	}
	welcome();
	getchar();
	return 0;
}
